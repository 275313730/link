<template id='game'>
    <div class="game">
        <div class="container">
            <div class="grid" each="value of arr" @click='print(index,event)' link="value">
            </div>
        </div>
        <div class="btn-wrapper">
            <a class="btn" @click="reset()">Reset</a>
            <a class="btn" @click="undo()">Undo</a>
        </div>
        <test></test>
    </div>
</template>

<script>
    const Game = {
        el: 'game',
        data() {
            return {
                arr: [],
                att: [1, 2, 3],
                isX: true,
                caling: false,
                winner: null,
                jugdeArr: [
                    [1, 4, 7],
                    [2, 5, 8],
                    [3, 6, 9],
                    [1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9],
                    [1, 5, 9],
                    [3, 5, 7]
                ],
                history: []
            }
        },
        mounted() {
            this.init()
        },
        methods: {
            init() {
                for (let i = 0; i < 9; i++) {
                    this.arr[i] = ''
                }
            },
            print(index, e) {
                if (this.caling) {
                    return
                }
                if (this.winner) {
                    alert(`${this.winner} is win!`)
                    return
                }
                if (this.arr[index] === '') {
                    this.arr[index] = this.isX ? 'X' : 'O'
                    this.isX = !this.isX
                    this.history.push(Object.assign([], this.arr))
                    this.cal()
                }
            },
            cal() {
                this.caling = true
                for (const indexArr of this.jugdeArr) {
                    let val1 = this.arr[indexArr[0] - 1],
                        val2 = this.arr[indexArr[1] - 1],
                        val3 = this.arr[indexArr[2] - 1]
                    if (val1 !== '' && val1 === val2 && val2 === val3) {
                        this.winner = val1
                        Link.$store[this.winner]++
                        alert(`${this.winner} is win!`)
                        break
                    }
                }
                this.caling = false
            },
            reset() {
                this.winner = null
                this.isX = true
                for (const key in this.arr) {
                    this.arr[key] = ''
                }
                this.history.splice(0, this.history.length)
            },
            undo() {
                if (this.history.length === 0) {
                    return
                }
                this.history.pop()
                if (this.history.length > 0) {
                    this.arr = Object.assign([], this.history[this.history.length - 1])
                    this.isX = !this.isX
                } else {
                    this.init()
                    this.isX = true
                }
                this.winner = null
            }
        }
    }
</script>

<style>
    .game {
        margin: auto;
        position: relative;
        text-align: center;
    }

    .game .container {
        display: flex;
        margin: auto;
        margin-bottom: 20px;
        position: relative;
        width: 21vw;
        flex-flow: row wrap;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .game .container .grid {
        flex: 0 0 32%;
        box-sizing: border-box;
        font-size: 4em;
        height: 7vw;
        line-height: 7vw;
        margin: 0.5px;
        border: 2px solid black;
    }

    .game .btn-wrapper {
        margin-bottom: 25px;
    }

    .game .btn-wrapper .btn {
        font-size: 1.5em;
        width: 100%;
        height: 100%;
        padding: 5px;
        cursor: pointer;
        border: 3px solid black;
    }

    .game .btn-wrapper .btn:hover {
        background-color: black;
        color: white;
    }
</style>